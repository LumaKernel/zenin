# mock-storybook タスク完了時の懸念事項・やり残し

## 完了した内容
- MSW (Mock Service Worker) のインストールと基本設定
- Effect.ts + React Query + MSW の統合
- Storybook用のデコレーター作成（withMSW, withQueryClient）
- TodoListコンポーネント用のモックハンドラー実装
- 複数の状態（Default, Empty, Loading, Error, ManyTodos）のストーリー作成
- 今後の開発のためのドキュメント整備
- ESLintエラーの修正とTypeScript型チェック確認

## 今後の改善点・懸念事項

### 1. MSWの実際の動作確認
- Storybookを実行して実際にモックが動作するかテストが必要
- Service Workerが正しく登録されるか確認が必要
- 各ストーリー（Loading, Error等）が期待通りに動作するか確認が必要

### 2. デコレーターの動作検証
- withMSWデコレーターでのハンドラー上書きが正しく動作するか不明
- worker.resetHandlers()が適切にクリーンアップされるか確認が必要
- 複数のストーリー間での状態の独立性確保

### 3. パフォーマンスの検証
- Service Workerの初期化コストが許容範囲内か
- 大量のハンドラー登録時の影響
- メモリリークの可能性（特にクリーンアップ処理）

### 4. Effect.tsとの統合深度
- より複雑なEffect（合成、エラーハンドリング等）でのテストが必要
- Runtime環境の設定が適切か検証が必要

### 5. 今後の拡張性
- 他のコンポーネントでの同様の実装パターンの検証
- 自動化ツール（ハンドラー生成等）の検討
- テストとの連携（同一モックの再利用）

## 推奨される次のアクション
1. `npm run storybook` で実際の動作確認
2. 各ストーリーの動作テスト
3. 他のコンポーネントでの同様実装
4. ドキュメントの改善（実際の動作確認後）